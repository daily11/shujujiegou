package com.swust.二叉树;


/**
 * 满二叉树：所有节点（非叶子节点），左右子树均非空
 * 完全二叉树：非满的节点，必然在整棵树的右下角
 * 二分搜索树的每个节点的值：
 * 	1 大于其左子树的所有节点的值
 *  2 小于其右子树的所有节点的值
 */
public interface BSTInterface<E> {
	
//    private class Node{
//        public E e;
//        public Node left, right;
//
//        public Node(E e){
//            this.e = e;
//            left = null;
//            right = null;
//        }
//    }
//
//    private Node root;
//    private int size;

	int getSize();
	
	boolean isEmpty();
	
	/***********************************包含开始***************************************/
	
	// 看二分搜索树中是否包含元素e
	boolean contains(E e);
	
	// 看以node为根的二分搜索树中是否包含元素e, 递归算法
//    private boolean contains(Node node, E e)
	/***********************************包含结束***************************************/
	
/***********************************增开始***************************************/
	// 向二分搜索树中添加新的元素e
	void add(E e);
    
	// 向以node为根的二分搜索树中插入元素e，递归算法
    // 返回插入新节点后二分搜索树的根
//    private Node add(Node node, E e)
/***********************************增结束***************************************/
	
	/***********************************遍历开始***************************************/
	// 二分搜索树的前序遍历
	void preOrder();
	
	// 二分搜索树的前序遍历【非递归】
	void preOrderNR();
	
	// 二分搜索树的中序遍历
	void inOrder();
	
	// 二分搜索树的后序遍历
	void postOrder();
	
	// 二分搜索树的层序遍历
	void levelOrder();
	/***********************************遍历结束***************************************/
	
	/***********************************查开始***************************************/
	// 寻找二分搜索树的最小元素
	E minimum();
	
	// 寻找二分搜索树的最大元素
	E maximum();
	/***********************************查开始***************************************/
	
	/***********************************删开始***************************************/
	// 从二分搜索树中删除最小值所在节点, 返回最小值
	E removeMin();
	
	// 从二分搜索树中删除最大值所在节点
	E removeMax();
	
	/**
	 *  从二分搜索树中删除元素为e的节点
	 *  1 递归查询到待删除的节点
	 *  2 待删除节点三种状态：
	 *  	2.1 左子树空
	 *  	2.2 右子树空
	 *  	2.3 左右子树非空
	 * @param e
	 */
	void remove(E e);
	/***********************************删结束***************************************/
	
	
}
